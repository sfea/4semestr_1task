public class Hash {
	int HashSize = 100;
	Table head;
	int key;
	public Hash next;

	private int hashFunction(int number) {
        int ret = 0;
	      int i = 0;
    		while ((number != 0) && (i < 100)){ 
	  		       ret = ((ret << 32 - 1) | (ret >> 1)) ^ (number);
	    		     i++;
		    }
		    return ret;
	}

	Hash(){
	    	key = hashFunction(1);
	}
	
	public Table hashSearch(int element) throws NullPointerException {
		  int value = hashFunction(element);
		  Hash h = new Hash();
		  h = this;
		  while (value != h.key) {
		      h = h.next;
		  }
		  Table a = new Table();
		  a = head;
		  if(a == null){
		      throw new NullPointerException();
		  }
		  while (a.val != element) {
		    	if (a.next == null) {
			    	throw new NullPointerException();
			    }
			    a = a.next;
		  }
		  return a;
	}

	public void hashAdd(int element) {
		  int value = hashFunction(element);
		  Hash h = this;
		  while (h.next != null){
		    	if (h.key != value)
			        h = h.next;
			    else{
				      Table a = new Table();
				      a = h.head;
				      while (a.next != null) {
					        a = a.next;
				      }
			    	  Table b = new Table();
				      b.val = element;
      				b.next = null;
      				a.next = b;
      				return;
			    }
		}
		
			Hash h_1 = new Hash();
			h.next = h_1;
			Table t = new Table();
			h_1.head = t;
			t.val = element;
			t.next = null;
			
	}

	public void hashDelete(int element) throws NullPointerException{
	    int value = hashFunction(element);
	    Hash h = new Hash();
	    h = this;
	    while (value != h.key) {
			    h = h.next;
		  }
		  Table a = new Table();
		  a = head;
		  if(a == null){
			    throw new NullPointerException();
		  }
		  while (a.next.val != element) {
			    if (a.next == null) {
				      throw new NullPointerException();
			    }
			    a = a.next;
		  }
		  a.next = a.next.next; 
	}
	
}
